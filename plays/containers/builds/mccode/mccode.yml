---
- name: McXtrace image builder
  hosts: all
  vars:
    # User
    user: centos

    # General packages
    python_version: 3.7.7
  
    tini_version: v0.19.0
    git_version: 2.9999
    mcstas_name: mcstas
    mcxtrace_name: mcxtrace
    package_version: 1.5
    package_name: "{{ mcxtrace_name }}-{{ package_version }}"
    package_archive: "{{ package_name }}.tar.gz"
    source_base: /tmp
    package_path: "{{ source_base }}/{{ package_archive }}"
    source_path: "{{ source_base }}/{{ package_name }}"
    third_party_path: "{{ source_path }}/3rdparty"

    # Mcstas and Mcxtrace
    mcstas_source_path: "{{ source_path }}/mcstas"
    mcstas_comps_path: "{{ source_path }}/mcstas-comps"
    mcstas_build_path: "{{ mcstas_source_path }}/build"
    mcstas_bin_path: "/usr/local/{{ mcstas_name }}/{{ git_version }}-git/bin"
    mcxtrace_source_path: "{{ source_path }}/mcxtrace"
    mcxtrace_comps_path: "{{ source_path }}/mcxtrace-comps"
    mcxtrace_build_path: "{{ mcxtrace_source_path }}/build"
    mcxtrace_bin_path: "/usr/local/{{ mcxtrace_name }}/{{ git_version }}-git/bin"

    # Mcrun and Mxrun
    mcrun_name: mcrun
    mxrun_name: mxrun
    python_tools_path: "{{ source_path }}/tools/Python"
    mcrun_source_path: "{{ python_tools_path }}/{{ mcrun_name }}"
    mcrun_bin_path: "/usr/local/{{ mcstas_name }}/{{ git_version }}-git/tools/Python/{{ mcrun_name }}"
    mxrun_source_path: "{{ python_tools_path }}/{{ mcrun_name }}"
    mxrun_bin_path: "/usr/local/{{ mcxtrace_name }}/{{ git_version }}-git/tools/Python/{{ mxrun_name }}"

    # Mccodelib (Mcrun and Mxrun dependency)
    mccodelib_name: mccodelib
    mccodelib_source_path: "{{ python_tools_path }}/mccodelib"

    # mcpl & ncrystal submodules
    mcpl_name: mcpl
    mcpl_version: 1.3.2
    mcpl_package: "{{ mcpl_name }}-{{ mcpl_version }}"
    mcpl_archive: "v{{ mcpl_version }}.tar.gz"
    mcpl_path: "{{ source_base }}/{{ mcpl_archive }}"
    mcpl_source_path: "{{ source_base }}/{{ mcpl_name }}"

    ncrystal_name: ncrystal
    ncrystal_version: 1.0.0
    ncrystal_package: "{{ ncrystal_name }}-{{ ncrystal_version }}"
    ncrystal_archive: "v{{ ncrystal_version }}.tar.gz"
    ncrystal_path: "{{ source_base }}/{{ ncrystal_archive }}"
    ncrystal_source_path: "{{ source_base }}/{{ ncrystal_name }}"

    # OpenMPI
    openmpi_name: openmpi
    openmpi_major_version: 4.0
    openmpi_minor_version: 5
    openmpi_version: "{{ openmpi_major_version }}.{{ openmpi_minor_version }}"
    openmpi_package: "https://download.open-mpi.org/release/open-mpi/v{{ openmpi_major_version }}/{{ openmpi_name }}-{{ openmpi_version }}.tar.gz"
    openmpi_archive: "{{ openmpi_name }}-{{ openmpi_version }}.tar.gz"
    openmpi_archive_path: "{{ source_base }}/{{ openmpi_archive }}"
    openmpi_source_path: "{{ source_base }}/{{ openmpi_name }}-{{ openmpi_version }}"

    ansible_bender:
      buildah_from_extra_args: "--ulimit nofile=65535:65535"
      base_image: docker.io/library/centos:7
      target_image:
        name: "docker.io/nielsbohr/mcstas-mcxtrace:latest"
        entrypoint: '["/tini", "-g", "--"]'
        cmd: "/start.sh"
        user: "{{ user }}"
        working_dir: "/home/{{ user }}"
        environment:
          PATH: "{{ mcstas_bin_path }}:{{ mcxtrace_bin_path }}:{{ mcrun_bin_path }}:{{ mxrun_bin_path }}:$PATH"
          MCSTAS_CC_OVERRIDE: gcc
          MCXTRACE_CC_OVERRIDE: gcc
      layering: false

  tasks:
  - name: install epel
    yum:
      state: present
      name:
        - epel-release

  - name: install prerequisites
    yum:
      state: present
      name:
        - vim
        - gcc
        - gcc-c++
        - cmake3
        - make
        - bison
        - flex
        - libnotify
        - python-setuptools
        - gcc-gfortran
        - openssl-devel
        - bzip2-devel
        - libffi-devel

  # Add user
  - name: "add user: {{ user }}"
    user:
      name: "{{ user }}"
      shell: /bin/bash
      groups:
        - users
      append: yes
      state: present

  - name: set home directory permissions
    file:
      state: directory
      mode: '755'
      path: "/home/{{ user }}"
      owner: "{{ user }}"
      group: "{{ user }}"
      recurse: yes

  # install python3.7
  - name: "install python {{ python_version }}"
    get_url:
      url: "{{ item.url }}"
      dest: "{{ item.dest }}"
      mode: '755'
    with_items:
      - { url: "https://www.python.org/ftp/python/{{ python_version }}/Python-{{ python_version }}.tar.xz", dest: "/tmp/python.tar.xz"}

  - name: "create target dir"
    file:
      state: directory
      mode: '755'
      path: /tmp/python

  - name: "unpack python {{ python_version }}"
    unarchive:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      remote_src: yes
      extra_opts: [--strip-components=1]
    with_items:
      - { src: "/tmp/python.tar.xz", dest: "/tmp/python/" }

  - name: "configure python {{ python_version }}"
    command:
      cmd: ./configure --enable-optimizations
      chdir: /tmp/python

  - name: "install python {{ python_version }}"
    make:
      chdir: /tmp/python
      target: altinstall

  - name: "setup links"
    file:
      state: link
      path: "{{ item.path }}"
      src: "{{ item.src }}"
    with_items:
      - { path: "/usr/local/bin/python3" , src: "/usr/local/bin/python3.7" }
      - { path: "/usr/local/bin/pip3" , src: "/usr/local/bin/pip3.7" }

  - name: link cmake3 to cmake
    file:
      state: link
      src: /usr/bin/cmake3
      path: /usr/bin/cmake
      mode: '755'

  - name: get tini
    get_url:
      url: "{{ item.url }}"
      dest: "{{ item.dest }}"
      mode: '755'
    with_items:
      - { url: "https://github.com/krallin/tini/releases/download/{{ tini_version }}/tini", dest: "/tini" }

  - name: make tini executable
    file:
      state: file
      mode: '755'
      path: "/tini"

  # Get the code
  - name: checkout github releases
    get_url:
      url: "{{ item.url }}"
      dest: "{{ item.dest }}"
    with_items:
      - { url: "https://github.com/McStasMcXtrace/McCode/archive/{{ package_archive }}", dest: "{{ package_path }}" }
      - { url: "https://github.com/mctools/mcpl/archive/{{ mcpl_archive }}", dest: "{{ mcpl_path }}" }
      - { url: "https://github.com/mctools/ncrystal/archive/{{ ncrystal_archive }}", dest: "{{ ncrystal_path }}" }
      - { url: "{{ openmpi_package }}", dest: "{{ openmpi_archive_path }}"}

  - name: create required unpack directory
    file:
      state: directory
      path: "{{ item }}"
    with_items:
      - "{{ source_path }}"
      - "{{ mcpl_source_path }}"
      - "{{ ncrystal_source_path }}"
      - "{{ openmpi_source_path }}"

  - name: unpack packages
    unarchive:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      remote_src: yes
      extra_opts: [--strip-components=1]
    with_items:
      - { src: "{{ package_path }}", dest: "{{ source_path }}" }
      - { src: "{{ mcpl_path }}", dest: "{{ mcpl_source_path }}" }
      - { src: "{{ ncrystal_path }}", dest: "{{ ncrystal_source_path }}" }
      - { src: "{{ openmpi_archive_path }}", dest: "{{ openmpi_source_path }}"}

  - name: move submodules into mcstas
    command: "mv {{ item.src }} {{ third_party_path }}/"
    with_items:
      - { src: "{{ mcpl_source_path }}", name: "{{ mcpl_name }}" }
      - { src: "{{ ncrystal_source_path }}", name: "{{ ncrystal_name }}" }

  # Openmpi
  - name: "configure openmpi {{ openmpi_version }}"
    command:
      cmd: ./configure
      chdir: "{{ openmpi_source_path }}"

  - name: "install openmpi {{ openmpi_version }}"
    make:
      chdir: "{{ openmpi_source_path }}"
      target: install

  # Setup the MCA parameter
  - name: "create the mca parameter file"
    file:
      state: "{{ item.state }}"
      path: "{{ item.path }}"
    with_items:
      - { state: directory, path: "/home/{{ user }}/.openmpi" }
      - { state: touch, path: "/home/{{ user }}/.openmpi/mca-params.conf"}
    become: yes
    become_method: su
    become_user: "{{ user }}"

  - name: "disable opempi plm_rsh_agent to ensure the mpi process is run locally"
    lineinfile:
      path: "$HOME/.openmpi/mca-params.conf"
      line: "plm_rsh_agent ="
      insertbefore: BOF
      create: yes
    become: yes
    become_method: su
    become_user: "{{ user }}"

  # McStas
  - name: "create required {{ mcstas_name }} build directory"
    file:
      state: directory
      path: "{{ mcstas_build_path }}"

  - name: "generate {{ mcstas_name }} make files via cmake"
    command:
      cmd: "/usr/bin/cmake -DCMAKE_BUILD_TYPE=Release {{ mcstas_source_path }}"
      chdir: "{{ mcstas_build_path }}"

  - name: "build mcstas - {{ mcxtrace_version }}"
    make:
      chdir: "{{ mcstas_build_path }}"
      target: all

  - name: "install mcstas - {{ mcxtrace_version }}"
    make:
      chdir: "{{ mcstas_build_path }}"
      target: install

  # McXtrace
  - name: "create required {{ mcxtrace_name }} build directory"
    file:
      state: directory
      path: "{{ mcxtrace_build_path }}"

  - name: "generate {{ mcxtrace_name }} make files via cmake"
    command:
      cmd: "/usr/bin/cmake -DCMAKE_BUILD_TYPE=Release {{ mcxtrace_source_path }}"
      chdir: "{{ mcxtrace_build_path }}"

    # TODO, lookup system number of threads
  - name: "build mcxtrace - {{ mcxtrace_version }}"
    make:
      chdir: "{{ mcxtrace_build_path }}"
      target: all

  - name: "install mcxtrace - {{ mcxtrace_version }}"
    make:
      chdir: "{{ mcxtrace_build_path }}"
      target: install

  # Build and install mcpl and ncrystal
  - name: "generate {{ mcpl_name }} and {{ ncrystal_name }}"
    command:
      cmd: "/usr/bin/cmake -DCMAKE_BUILD_TYPE=Release . {{ item.cmake_args }}"
      chdir: "{{ item.src }}"
    with_items:
      - { src: "{{ third_party_path }}/{{ mcpl_name }}", cmake_args: "-DBUILD_WITHG4=OFF" }
      - { src: "{{ third_party_path }}/{{ ncrystal_name }}", cmake_args: "-DBUILD_G4HOOKS=OFF" }

  - name: "build {{ mcpl_name }} and {{ ncrystal_name }}"
    make:
      chdir: "{{ item.src }}"
      target: all
    with_items:
      - { src: "{{ third_party_path }}/{{ mcpl_name }}" }
      - { src: "{{ third_party_path }}/{{ ncrystal_name }}" }

  - name: "install {{ mcpl_name }} and {{ ncrystal_name }}"
    make:
      chdir: "{{ item.src }}"
      target: install
    with_items:
    - { src: "{{ third_party_path }}/{{ mcpl_name }}" }
    - { src: "{{ third_party_path }}/{{ ncrystal_name }}" }

  # Build and install mcstas-comps and mcxtrace-comps
  - name: "generate {{ mcstas_comps_path }} and {{ mcxtrace_comps_path }}"
    command:
      cmd: "/usr/bin/cmake -DCMAKE_BUILD_TYPE=Release ."
      chdir: "{{ item.src }}"
    with_items:
      - { src: "{{ mcstas_comps_path }}" }
      - { src: "{{ mcxtrace_comps_path }}" }

  - name: "build {{ mcstas_comps_path }} and {{ mcxtrace_comps_path }}"
    make:
      chdir: "{{ item.src }}"
      target: all
    with_items:
      - { src: "{{ mcstas_comps_path }}" }
      - { src: "{{ mcxtrace_comps_path }}" }

  - name: "install {{ mcstas_comps_path }} and {{ mcxtrace_comps_path }}"
    make:
      chdir: "{{ item.src }}"
      target: install
    with_items:
    - { src: "{{ mcstas_comps_path }}" }
    - { src: "{{ mcxtrace_comps_path }}" }

  # Install mcrun python utils
  - name: "create required directory for {{ mcrun_name }}"
    file:
      state: directory
      path: "{{ mcrun_source_path }}"

  - name: "generate {{ mcrun }} make files via cmake"
    command:
      cmd: "/usr/bin/cmake -DCMAKE_BUILD_TYPE=Release -Denable_{{ mcstas_name }}=1 {{ mcrun_source_path }}"
      chdir: "{{ mcrun_source_path }}"

  - name: "build - {{ mcrun_name }}"
    make:
      chdir: "{{ mcrun_source_path }}"
      target: all

  - name: "install - {{ mcrun_name }}"
    make:
      chdir: "{{ mcrun_source_path }}"
      target: install

  # Install mxrun python utils
  - name: "create required directory for {{ mxrun_name }}"
    file:
      state: directory
      path: "{{ mcrun_source_path }}"

  - name: "generate {{ mxrun }} make files via cmake"
    command:
      cmd: "/usr/bin/cmake -DCMAKE_BUILD_TYPE=Release -Denable_{{ mcxtrace_name }}=1 {{ mcrun_source_path }}"
      chdir: "{{ mcrun_source_path }}"

  - name: "build - {{ mcrun_name }}"
    make:
      chdir: "{{ mcrun_source_path }}"
      target: all
  
  - name: "install - {{ mcrun_name }}"
    make:
      chdir: "{{ mcrun_source_path }}"
      target: install

  # Install mccodelib (mcstas)
  - name: "create required directory for {{ mccodelib_name }}"
    file:
      state: directory
      path: "{{ mccodelib_source_path }}"

  - name: "generate {{ mccodelib_name }} make files via cmake"
    command:
      cmd: "/usr/bin/cmake -DCMAKE_BUILD_TYPE=Release -Denable_{{ mcstas_name }}=1 -DMPICC=mpicc -DMPIRUN=mpirun -DCC=gcc {{ mccodelib_source_path }}"
      chdir: "{{ mccodelib_source_path }}"

  - name: "build - {{ mccodelib_name }}"
    make:
      chdir: "{{ mccodelib_source_path }}"
      target: all

  - name: "install - {{ mccodelib_name }}"
    make:
      chdir: "{{ mccodelib_source_path }}"
      target: install

  # Install mccodelib (mcxtrace)
  - name: "generate {{ mccodelib_name }} make files via cmake"
    command:
      cmd: "/usr/bin/cmake -DCMAKE_BUILD_TYPE=Release -Denable_{{ mcxtrace_name }}=1 -DMPICC=mpicc -DMPIRUN=mpirun -DCC=gcc {{ mccodelib_source_path }}"
      chdir: "{{ mccodelib_source_path }}"

  - name: "build - {{ mccodelib_name }}"
    make:
      chdir: "{{ mccodelib_source_path }}"
      target: all
  
  - name: "install - {{ mccodelib_name }}"
    make:
      chdir: "{{ mccodelib_source_path }}"
      target: install

  # Install mcrun/mxrun python dependencies
  - name: "python package dependencies for mxrun"
    pip:
      name:
        - PyYaml
      executable: /usr/local/bin/pip3

  # Install profile path update
  - name: setup PATH environment
    lineinfile:
      path: /etc/profile.d/mccode_path.sh
      line: 'export PATH="{{ mcstas_bin_path }}:{{ mcxtrace_bin_path }}:{{ mcrun_bin_path }}:{{ mxrun_bin_path }}:$PATH"'
      insertbefore: BOF
      create: yes

  - name: create example folders
    file:
      state: directory
      path: "{{ item }}"
    with_items:
      - "/usr/local/share/{{ mcstas_name }}"
      - "/usr/local/share/{{ mcxtrace_name }}"

  - name: copy examples
    command: "cp -r {{ item.src }} {{ item.dst }}"
    with_items:
     - { src: "{{ mcstas_comps_path }}/examples",
         dst: "/usr/local/share/{{ mcstas_name }}/" }
     - { src: "{{ mcxtrace_comps_path }}/examples",
         dst: "/usr/local/share/{{ mcxtrace_name }}/" }

  - name: set the CC environment variable
    lineinfile:
       path: /etc/profile.d/mccode_cc_env.sh
       line: "export {{ item.env_var }}={{ item.value }}"
       insertbefore: BOF
       create: yes
    with_items:
      - { env_var: "MCSTAS_CC_OVERRIDE", value: 'gcc'}
      - { env_var: "MCXTRACE_CC_OVERRIDE", value: 'gcc'}

  - name: remove source files
    file:
      state: absent
      path: "{{ item }}"
    with_items:
      - "{{ package_path }}"
      - "{{ source_path }}"
      - "{{ mcpl_path }}"
      - "{{ mcpl_source_path }}"
      - "{{ ncrystal_path }}"
      - "{{ ncrystal_source_path }}"
      - "{{ openmpi_archive_path }}"
      - "{{ openmpi_source_path }}"
      - "/tmp/python*"

  # Make entrypoint cmd script
  - name: make start.sh
    blockinfile:
      create: yes
      path: /start.sh
      mode: '755'
      marker: "# {mark} ANSIBLE MANAGED BLOCK "
      insertafter: ""
      block:
        #!/bin/bash
        set -e
        exec "$@"
